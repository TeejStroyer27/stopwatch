import React, { Component } from 'react';
import {
    StyleSheet,
    Text,
    View,
    ListView
} from 'react-native';
import formatTime from 'minutes-seconds-milliseconds';
import StartButton from './start-button';
import StopButton from './stop-button';
import ResetButton from './reset-button';
import LapButton from './lap-button';
import LapRow from './lap-row';
import Time from './time';

let ds = new ListView.DataSource({
    rowHasChanged: (r1, r2) => r1 !== r2
});

class Stopwatch extends Component {
    constructor(props) {
        super(props);

        this.interval = null;
        this.lapTimeInterval = null;

        this.state = {
            lapTimeElapsed: null,
            timeElapsed: null,
            running: false,
            canReset: false,
            lapStartTime: null,
            startTime: null,
            laps: [],
            dataSource: ds.cloneWithRows([]),
            lapsCount: 0,
            canLap: false,
            showLapMessage: false
        };
    }

    render() {
        return (
            <View style={styles.container}>
                <View style={styles.header}>
                    <View style={styles.titleWrapper}>
                        <Text style={styles.title}>
                            Stopwatch
                        </Text>
                    </View>

                    <View style={styles.lapTimeElapsedWrapper}>
                        <Time value={formatTime(this.state.lapTimeElapsed)} customStyles={styles.lapTimeElapsed} />
                    </View>

                    <View style={styles.timeElapsedWrapper}>
                        <Time value={formatTime(this.state.timeElapsed)} customStyles={styles.timeElapsed} />
                    </View>

                    <View style={styles.emptyWrapper} />
                </View>

                <View style={styles.footer}>
                    <View style={styles.buttonWrapper}>
                        {
                            this.state.canReset ?
                                <ResetButton onPress={this.handleResetPress.bind(this)} /> :
                                <LapButton onPress={this.handleLapPress.bind(this)} disabled={!this.state.running} />

                        }

                        {
                            this.state.running ?
                                <StopButton onPress={this.handleStopPress.bind(this)} /> :
                                <StartButton onPress={this.handleStartPress.bind(this)} />
                        }
                    </View>

                    <View style={styles.lapWrapper}>
                        <ListView enableEmptySections={true} dataSource={this.state.dataSource} renderRow={this.renderLap.bind(this)} />
                    </View>
                </View>
            </View>
        );
    }

    renderLap(rowData, sectionID, rowID) {
        return (
            <LapRow index={this.state.lapsCount - rowID} time={formatTime(rowData)} />
        );
    }

    handleStartPress() {
        this.setState({
            lapStartTime: new Date(),
            startTime: new Date(),
            running: true,
            canReset: false,
            showLapMessage: true
        });

        this.interval = setInterval(() => {
            this.setState({
                timeElapsed: new Date() - this.state.startTime
            });
        }, 30);

        this._startLapTimeInterval();
    }

    handleStopPress() {
        clearInterval(this.interval);
        clearInterval(this.lapTimeInterval);

        this.setState({
            running: false,
            canReset: true
        });
    }

    handleLapPress() {
        clearInterval(this.lapTimeInterval);

        this._startLapTimeInterval();

        let lap = this.state.timeElapsed,
            laps = this.state.laps.concat([lap]);

        this.setState({
            laps: laps.reverse(), // Reverse the array so we get descending order in our ListView
            dataSource: ds.cloneWithRows(laps),
            lapsCount: 1 + this.state.lapsCount
        });
    }

    handleResetPress() {
        clearInterval(this.interval);

        this.setState({
            lapTimeElapsed: null,
            timeElapsed: null,
            running: false,
            canReset: false,
            startTime: null,
            laps: [],
            dataSource: ds.cloneWithRows([]),
            lapsCount: 0
        });
    }

    _startLapTimeInterval() {
        this.setState({
            lapStartTime: new Date()
        });

        this.lapTimeInterval = setInterval(() => {
            this.setState({
                lapTimeElapsed: new Date() - this.state.lapStartTime
            });
        }, 30);
    }
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        alignItems: 'stretch'
    },
    header: {
        flex: 4
    },
    titleWrapper: {
        flex: 3,
        borderBottomWidth: 1,
        borderBottomColor: '#e1e1e1',
        backgroundColor: 'rgb(252, 252, 252)',
        alignItems: 'center',
        justifyContent: 'flex-end',
        paddingBottom: 10
    },
    title: {
        fontSize: 18
    },
    emptyWrapper: {
        flex: 2
    },
    lapTimeElapsedWrapper: {
        flex: 2,
        justifyContent: 'flex-start',
        alignItems: 'flex-end'
    },
    lapTimeElapsed: {
        fontSize: 20,
        position: 'relative',
        top: 26,
        right: 35,
        color: 'rgb(130, 130, 130)',
        fontFamily: 'Helvetica Neue',
        fontWeight: '200'
    },
    timeElapsedWrapper: {
        flex: 6,
        justifyContent: 'center',
        alignItems: 'center'
    },
    timeElapsed: {
        fontSize: 80,
        fontWeight: '100',
        fontFamily: 'Helvetica Neue'
    },
    footer: {
        flex: 6,
        backgroundColor: '#F5F6FA',
        borderTopColor: '#e5e5e5',
        borderTopWidth: 1
    },
    buttonWrapper: {
        flex: 2,
        flexDirection: 'row',
        justifyContent: 'space-around',
        alignItems: 'center',
        borderTopColor: '#e5e5e5'
    },
    lapWrapper: {
        flex: 5
    }
});


export default Stopwatch;